name: Auto Build

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux]
        arch: [x86_64, aarch64]
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
      - name: Default to latest Rust
        run: |
          rustup install nightly
          rustup default nightly
      - name: Install aarch64 GCC
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      - name: Update rustup
        run: rustup update nightly
      - name: Get Nightly toolchain
        run: rustup toolchain add nightly-x86_64-unknown-linux-gnu
      - name: Add Nightly rust-src
        run: rustup component add rust-src --toolchain nightly
      - name: Add aarch64 target
        if: matrix.arch == 'aarch64'
        run: rustup target add aarch64-unknown-linux-gnu
      - name: (Debug) Print Cargo version
        run: cargo --version
      - name: Run tests
        run: cargo test --verbose
      - name: Run build
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: RUSTFLAGS="-Zlocation-detail=none -C target-feature=+crt-static" cargo +nightly build --verbose -Z build-std=std,panic_abort --target ${{matrix.arch}}-unknown-linux-gnu --release
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sealupd-${{matrix.os}}-${{matrix.arch}}
          path: target/${{matrix.arch}}-unknown-linux-gnu/release/sealupd

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        os: [darwin]
        arch: [x86_64, aarch64]
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
      - name: Default to latest Rust
        run: |
          rustup install nightly
          rustup default nightly
      - name: Get Nightly toolchain
        run: rustup toolchain add nightly-aarch64-apple-darwin
      - name: Add Nightly rust-src
        run: rustup component add rust-src --toolchain nightly
      - name: (Debug) Print Cargo version
        run: cargo --version
      - name: Run tests
        run: cargo test --verbose
      - name: Run build
        run: RUSTFLAGS="-Zlocation-detail=none -C target-feature=+crt-static" cargo +nightly build --verbose -Z build-std=std,panic_abort --target ${{matrix.arch}}-apple-darwin --release
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sealupd-${{matrix.os}}-${{matrix.arch}}
          path: target/${{matrix.arch}}-apple-darwin/release/sealupd

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        os: [windows]
        arch: [x86_64, i686]
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
      - name: Default to latest Rust
        run: |
          rustup install stable
          rustup default stable
      - name: Add target
        run: rustup target add ${{matrix.arch}}-pc-windows-msvc
      - name: (Debug) Print Cargo version
        run: cargo --version
      - name: Run tests
        run: cargo test --verbose
      - name: Run build
        run: |
          set RUSTFLAGS=-C target-feature=+crt-static
          cargo build --verbose --target ${{matrix.arch}}-pc-windows-msvc --release
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sealupd-${{matrix.os}}-${{matrix.arch}}
          path: target/${{matrix.arch}}-pc-windows-msvc/release/sealupd.exe

  create-release:
    if: github.event_name == 'workflow_dispatch'
    needs:
      - build-linux
      - build-macos
      - build-windows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract version
        id: version
        run: |
          set -euo pipefail
          python3 - <<'PY' >> "$GITHUB_OUTPUT"
          import pathlib
          import re

          text = pathlib.Path('Cargo.toml').read_text(encoding='utf-8')
          match = re.search(r'^version\s*=\s*"([^"]+)"', text, re.MULTILINE)
          if not match:
              raise SystemExit('Version not found in Cargo.toml')
          print(f'version={match.group(1)}')
          PY
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Package assets
        run: |
          set -euo pipefail
          mkdir -p release
          for dir in artifacts/*; do
            name="$(basename "$dir")"
            if [ -f "$dir/sealupd.exe" ]; then
              cp "$dir/sealupd.exe" "release/${name}.exe"
              (cd release && zip -j "${name}.zip" "${name}.exe")
              rm "release/${name}.exe"
            elif [ -f "$dir/sealupd" ]; then
              cp "$dir/sealupd" "release/${name}"
              chmod +x "release/${name}"
              tar -C release -czf "release/${name}.tar.gz" "${name}"
              rm "release/${name}"
            fi
          done
      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Sealupd v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
